// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"

	"gorm.io/gen"

	"gorm.io/plugin/dbresolver"
)

func Use(db *gorm.DB, opts ...gen.DOOption) *Query {
	return &Query{
		db:                      db,
		AutoPlan:                newAutoPlan(db, opts...),
		AutoPlanEmail:           newAutoPlanEmail(db, opts...),
		AutoPlanReport:          newAutoPlanReport(db, opts...),
		AutoPlanTaskConf:        newAutoPlanTaskConf(db, opts...),
		AutoPlanTimedTaskConf:   newAutoPlanTimedTaskConf(db, opts...),
		Machine:                 newMachine(db, opts...),
		PreinstallConf:          newPreinstallConf(db, opts...),
		PublicFunction:          newPublicFunction(db, opts...),
		ReportMachine:           newReportMachine(db, opts...),
		Setting:                 newSetting(db, opts...),
		SmsLog:                  newSmsLog(db, opts...),
		StressPlan:              newStressPlan(db, opts...),
		StressPlanEmail:         newStressPlanEmail(db, opts...),
		StressPlanReport:        newStressPlanReport(db, opts...),
		StressPlanTaskConf:      newStressPlanTaskConf(db, opts...),
		StressPlanTimedTaskConf: newStressPlanTimedTaskConf(db, opts...),
		Target:                  newTarget(db, opts...),
		TargetDebugLog:          newTargetDebugLog(db, opts...),
		Team:                    newTeam(db, opts...),
		TeamEnv:                 newTeamEnv(db, opts...),
		TeamEnvService:          newTeamEnvService(db, opts...),
		TeamUserQueue:           newTeamUserQueue(db, opts...),
		User:                    newUser(db, opts...),
		UserCollectInfo:         newUserCollectInfo(db, opts...),
		UserTeam:                newUserTeam(db, opts...),
		Variable:                newVariable(db, opts...),
		VariableImport:          newVariableImport(db, opts...),
	}
}

type Query struct {
	db *gorm.DB

	AutoPlan                autoPlan
	AutoPlanEmail           autoPlanEmail
	AutoPlanReport          autoPlanReport
	AutoPlanTaskConf        autoPlanTaskConf
	AutoPlanTimedTaskConf   autoPlanTimedTaskConf
	Machine                 machine
	PreinstallConf          preinstallConf
	PublicFunction          publicFunction
	ReportMachine           reportMachine
	Setting                 setting
	SmsLog                  smsLog
	StressPlan              stressPlan
	StressPlanEmail         stressPlanEmail
	StressPlanReport        stressPlanReport
	StressPlanTaskConf      stressPlanTaskConf
	StressPlanTimedTaskConf stressPlanTimedTaskConf
	Target                  target
	TargetDebugLog          targetDebugLog
	Team                    team
	TeamEnv                 teamEnv
	TeamEnvService          teamEnvService
	TeamUserQueue           teamUserQueue
	User                    user
	UserCollectInfo         userCollectInfo
	UserTeam                userTeam
	Variable                variable
	VariableImport          variableImport
}

func (q *Query) Available() bool { return q.db != nil }

func (q *Query) clone(db *gorm.DB) *Query {
	return &Query{
		db:                      db,
		AutoPlan:                q.AutoPlan.clone(db),
		AutoPlanEmail:           q.AutoPlanEmail.clone(db),
		AutoPlanReport:          q.AutoPlanReport.clone(db),
		AutoPlanTaskConf:        q.AutoPlanTaskConf.clone(db),
		AutoPlanTimedTaskConf:   q.AutoPlanTimedTaskConf.clone(db),
		Machine:                 q.Machine.clone(db),
		PreinstallConf:          q.PreinstallConf.clone(db),
		PublicFunction:          q.PublicFunction.clone(db),
		ReportMachine:           q.ReportMachine.clone(db),
		Setting:                 q.Setting.clone(db),
		SmsLog:                  q.SmsLog.clone(db),
		StressPlan:              q.StressPlan.clone(db),
		StressPlanEmail:         q.StressPlanEmail.clone(db),
		StressPlanReport:        q.StressPlanReport.clone(db),
		StressPlanTaskConf:      q.StressPlanTaskConf.clone(db),
		StressPlanTimedTaskConf: q.StressPlanTimedTaskConf.clone(db),
		Target:                  q.Target.clone(db),
		TargetDebugLog:          q.TargetDebugLog.clone(db),
		Team:                    q.Team.clone(db),
		TeamEnv:                 q.TeamEnv.clone(db),
		TeamEnvService:          q.TeamEnvService.clone(db),
		TeamUserQueue:           q.TeamUserQueue.clone(db),
		User:                    q.User.clone(db),
		UserCollectInfo:         q.UserCollectInfo.clone(db),
		UserTeam:                q.UserTeam.clone(db),
		Variable:                q.Variable.clone(db),
		VariableImport:          q.VariableImport.clone(db),
	}
}

func (q *Query) ReadDB() *Query {
	return q.clone(q.db.Clauses(dbresolver.Read))
}

func (q *Query) WriteDB() *Query {
	return q.clone(q.db.Clauses(dbresolver.Write))
}

func (q *Query) ReplaceDB(db *gorm.DB) *Query {
	return &Query{
		db:                      db,
		AutoPlan:                q.AutoPlan.replaceDB(db),
		AutoPlanEmail:           q.AutoPlanEmail.replaceDB(db),
		AutoPlanReport:          q.AutoPlanReport.replaceDB(db),
		AutoPlanTaskConf:        q.AutoPlanTaskConf.replaceDB(db),
		AutoPlanTimedTaskConf:   q.AutoPlanTimedTaskConf.replaceDB(db),
		Machine:                 q.Machine.replaceDB(db),
		PreinstallConf:          q.PreinstallConf.replaceDB(db),
		PublicFunction:          q.PublicFunction.replaceDB(db),
		ReportMachine:           q.ReportMachine.replaceDB(db),
		Setting:                 q.Setting.replaceDB(db),
		SmsLog:                  q.SmsLog.replaceDB(db),
		StressPlan:              q.StressPlan.replaceDB(db),
		StressPlanEmail:         q.StressPlanEmail.replaceDB(db),
		StressPlanReport:        q.StressPlanReport.replaceDB(db),
		StressPlanTaskConf:      q.StressPlanTaskConf.replaceDB(db),
		StressPlanTimedTaskConf: q.StressPlanTimedTaskConf.replaceDB(db),
		Target:                  q.Target.replaceDB(db),
		TargetDebugLog:          q.TargetDebugLog.replaceDB(db),
		Team:                    q.Team.replaceDB(db),
		TeamEnv:                 q.TeamEnv.replaceDB(db),
		TeamEnvService:          q.TeamEnvService.replaceDB(db),
		TeamUserQueue:           q.TeamUserQueue.replaceDB(db),
		User:                    q.User.replaceDB(db),
		UserCollectInfo:         q.UserCollectInfo.replaceDB(db),
		UserTeam:                q.UserTeam.replaceDB(db),
		Variable:                q.Variable.replaceDB(db),
		VariableImport:          q.VariableImport.replaceDB(db),
	}
}

type queryCtx struct {
	AutoPlan                *autoPlanDo
	AutoPlanEmail           *autoPlanEmailDo
	AutoPlanReport          *autoPlanReportDo
	AutoPlanTaskConf        *autoPlanTaskConfDo
	AutoPlanTimedTaskConf   *autoPlanTimedTaskConfDo
	Machine                 *machineDo
	PreinstallConf          *preinstallConfDo
	PublicFunction          *publicFunctionDo
	ReportMachine           *reportMachineDo
	Setting                 *settingDo
	SmsLog                  *smsLogDo
	StressPlan              *stressPlanDo
	StressPlanEmail         *stressPlanEmailDo
	StressPlanReport        *stressPlanReportDo
	StressPlanTaskConf      *stressPlanTaskConfDo
	StressPlanTimedTaskConf *stressPlanTimedTaskConfDo
	Target                  *targetDo
	TargetDebugLog          *targetDebugLogDo
	Team                    *teamDo
	TeamEnv                 *teamEnvDo
	TeamEnvService          *teamEnvServiceDo
	TeamUserQueue           *teamUserQueueDo
	User                    *userDo
	UserCollectInfo         *userCollectInfoDo
	UserTeam                *userTeamDo
	Variable                *variableDo
	VariableImport          *variableImportDo
}

func (q *Query) WithContext(ctx context.Context) *queryCtx {
	return &queryCtx{
		AutoPlan:                q.AutoPlan.WithContext(ctx),
		AutoPlanEmail:           q.AutoPlanEmail.WithContext(ctx),
		AutoPlanReport:          q.AutoPlanReport.WithContext(ctx),
		AutoPlanTaskConf:        q.AutoPlanTaskConf.WithContext(ctx),
		AutoPlanTimedTaskConf:   q.AutoPlanTimedTaskConf.WithContext(ctx),
		Machine:                 q.Machine.WithContext(ctx),
		PreinstallConf:          q.PreinstallConf.WithContext(ctx),
		PublicFunction:          q.PublicFunction.WithContext(ctx),
		ReportMachine:           q.ReportMachine.WithContext(ctx),
		Setting:                 q.Setting.WithContext(ctx),
		SmsLog:                  q.SmsLog.WithContext(ctx),
		StressPlan:              q.StressPlan.WithContext(ctx),
		StressPlanEmail:         q.StressPlanEmail.WithContext(ctx),
		StressPlanReport:        q.StressPlanReport.WithContext(ctx),
		StressPlanTaskConf:      q.StressPlanTaskConf.WithContext(ctx),
		StressPlanTimedTaskConf: q.StressPlanTimedTaskConf.WithContext(ctx),
		Target:                  q.Target.WithContext(ctx),
		TargetDebugLog:          q.TargetDebugLog.WithContext(ctx),
		Team:                    q.Team.WithContext(ctx),
		TeamEnv:                 q.TeamEnv.WithContext(ctx),
		TeamEnvService:          q.TeamEnvService.WithContext(ctx),
		TeamUserQueue:           q.TeamUserQueue.WithContext(ctx),
		User:                    q.User.WithContext(ctx),
		UserCollectInfo:         q.UserCollectInfo.WithContext(ctx),
		UserTeam:                q.UserTeam.WithContext(ctx),
		Variable:                q.Variable.WithContext(ctx),
		VariableImport:          q.VariableImport.WithContext(ctx),
	}
}

func (q *Query) Transaction(fc func(tx *Query) error, opts ...*sql.TxOptions) error {
	return q.db.Transaction(func(tx *gorm.DB) error { return fc(q.clone(tx)) }, opts...)
}

func (q *Query) Begin(opts ...*sql.TxOptions) *QueryTx {
	return &QueryTx{q.clone(q.db.Begin(opts...))}
}

type QueryTx struct{ *Query }

func (q *QueryTx) Commit() error {
	return q.db.Commit().Error
}

func (q *QueryTx) Rollback() error {
	return q.db.Rollback().Error
}

func (q *QueryTx) SavePoint(name string) error {
	return q.db.SavePoint(name).Error
}

func (q *QueryTx) RollbackTo(name string) error {
	return q.db.RollbackTo(name).Error
}
